#!/bin/bash

# 3rd Party Tracer - Production Deployment Script
# This script prepares the application for production deployment

echo "üöÄ Starting 3rd Party Tracer deployment..."

# Check if we're in the correct directory
if [ ! -f "index.html" ]; then
    echo "‚ùå Error: index.html not found. Please run this script from the project root directory."
    exit 1
fi

# Create docs directory if it doesn't exist
if [ ! -d "docs" ]; then
    echo "üìÅ Creating docs directory..."
    mkdir docs
else
    echo "üìÅ docs directory already exists, cleaning it..."
    rm -rf docs/*
fi


# Copy required production files
echo "üìã Copying production files to docs/..."

# Core HTML files
cp index.html docs/
cp about.html docs/

# CSS file
cp style.css docs/

# JavaScript files - Configuration and API
cp config.js docs/
cp api-client.js docs/

# JavaScript files - Core Application
cp app.js docs/
cp dns-analyzer.js docs/
cp service-detection-engine.js docs/
cp data-processor.js docs/
cp ui-renderer.js docs/
cp analysis-controller.js docs/
cp service-registry.js docs/
cp subdomain-registry.js docs/
cp export-manager.js docs/

# Generate release status file with timestamp
echo "üìÖ Generating release status..."
TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S %Z')
echo "Last deployment: $TIMESTAMP" > docs/release-status.txt
echo "Deployment script version: 1.1" >> docs/release-status.txt
echo "Generated by: deploy.sh" >> docs/release-status.txt

# Create .nojekyll file for GitHub Pages
echo "üîß Creating .nojekyll file for GitHub Pages compatibility..."
touch docs/.nojekyll

# Verify all files were copied
echo "‚úÖ Verifying deployment files..."

required_files=(
    "index.html"
    "about.html"
    "style.css"
    "config.js"
    "api-client.js"
    "app.js"
    "dns-analyzer.js"
    "service-detection-engine.js"
    "data-processor.js"
    "ui-renderer.js"
    "analysis-controller.js"
    "service-registry.js"
    "subdomain-registry.js"
    "export-manager.js"
    "release-status.txt"
    ".nojekyll"
)

missing_files=()

for file in "${required_files[@]}"; do
    if [ ! -f "docs/$file" ]; then
        missing_files+=("$file")
    fi
done

if [ ${#missing_files[@]} -eq 0 ]; then
    echo "‚úÖ All required files successfully copied to docs/"
    echo ""
    echo "üìä Deployment Summary:"
    echo "   üìÅ docs/ directory created"
    echo "   üìÑ HTML: index.html, about.html"
    echo "   üé® CSS: style.css"
    echo "   ‚öôÔ∏è  JavaScript files:"
    echo "      - app.js (main application wrapper)"
    echo "      - analysis-controller.js (orchestrates analysis)"
    echo "      - dns-analyzer.js (DNS analysis)"
    echo "      - service-detection-engine.js (service detection)"
    echo "      - data-processor.js (data processing)"
    echo "      - ui-renderer.js (UI rendering)"
    echo "      - service-registry.js (service management)"
    echo "      - subdomain-registry.js (subdomain management)"
    echo "      - export-manager.js (JSON/PDF/XLSX export functionality)"
    echo "   üìÖ Deployment info:"
    echo "      - release-status.txt (deployment timestamp)"
    echo "      - .nojekyll (disable jekyll processing)"
    echo ""
    echo "üéâ Deployment ready! The docs/ folder contains all production files."
    echo "üìÖ Release timestamp: $TIMESTAMP"
    echo "üí° You can now deploy the docs/ folder to GitHub Pages or any web server."
else
    echo "‚ùå Error: The following files are missing from docs/:"
    for file in "${missing_files[@]}"; do
        echo "   - $file"
    done
    exit 1
fi

# Show file sizes for reference
echo ""
echo "üìè File sizes in docs/:"
ls -lh docs/

# Show release status content
echo ""
echo "üìÖ Release status file content:"
cat docs/release-status.txt

echo ""
echo "üöÄ Deployment script completed successfully!"

# Ask if user wants to deploy to production
echo ""
read -p "ü§î Do you want to deploy to production (git add, commit, push)? (y/N): " -n 1 -r
echo ""

if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo "üöÄ Starting production deployment..."
    
    # Check if we're in a git repository
    if [ ! -d ".git" ]; then
        echo "‚ùå Error: Not a git repository. Please initialize git first."
        exit 1
    fi
    
    # Add docs folder to git
    echo "üìù Adding docs/ to git..."
    git add docs/
    
    # Generate meaningful commit message
    if git diff --cached --name-only | grep -q "docs/"; then
        # Get list of changed files in main directory
        CHANGED_FILES=$(git diff --name-only HEAD~1 2>/dev/null || echo "initial")
        
        # Generate meaningful message based on what changed
        if echo "$CHANGED_FILES" | grep -q "index.html"; then
            COMMIT_MSG="deploy: update main application UI"
        elif echo "$CHANGED_FILES" | grep -q "\.js$"; then
            COMMIT_MSG="deploy: update JavaScript functionality"
        elif echo "$CHANGED_FILES" | grep -q "\.css$"; then
            COMMIT_MSG="deploy: update styling and layout"
        else
            COMMIT_MSG="deploy: update 3rd Party Tracer production files"
        fi
        
        # Add timestamp
        COMMIT_MSG="$COMMIT_MSG - $(date +%Y-%m-%d)"
    else
        COMMIT_MSG="deploy: update 3rd Party Tracer production files - $(date +%Y-%m-%d)"
    fi
    
    # Commit changes
    echo "üíæ Committing changes with message: $COMMIT_MSG"
    git commit -m "$COMMIT_MSG"
    
    # Push to remote
    echo "üöÄ Pushing to remote repository..."
    git push
    
    echo ""
    echo "‚úÖ Production deployment completed successfully!"
    echo "üåê Your application should now be live on GitHub Pages (if enabled)."
else
    echo "‚è∏Ô∏è  Deployment skipped. You can manually commit and push when ready."
fi 